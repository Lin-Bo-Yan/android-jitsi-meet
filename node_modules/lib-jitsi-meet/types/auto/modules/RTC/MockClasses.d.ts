/**
 * Mock {@link TraceablePeerConnection} - add things as needed, but only things useful for all tests.
 */
export class MockPeerConnection {
    /**
     * Constructor.
     *
     * @param {string} id RTC id
     * @param {boolean} usesUnifiedPlan
     * @param {boolean} simulcast
     */
    constructor(id: string, usesUnifiedPlan: boolean, simulcast: boolean);
    id: string;
    _usesUnifiedPlan: boolean;
    peerconnection: MockRTCPeerConnection;
    _simulcast: boolean;
    /**
     * {@link TraceablePeerConnection.localDescription}.
     *
     * @returns {Object}
     */
    get localDescription(): any;
    /**
     * {@link TraceablePeerConnection.remoteDescription}.
     *
     * @returns {Object}
     */
    get remoteDescription(): any;
    /**
     * {@link TraceablePeerConnection.createAnswer}.
     *
     * @returns {Promise<Object>}
     */
    createAnswer(): Promise<any>;
    /**
     * Returns the list of the codecs negotiated.
     * @returns {Array<string>}
     */
    getConfiguredVideoCodecs(): Array<string>;
    /**
     * {@link TraceablePeerConnection.isSpatialScalabilityOn}.
     *
     * @returns {boolean}
     */
    isSpatialScalabilityOn(): boolean;
    /**
     * {@link TraceablePeerConnection.processLocalSdpForTransceiverInfo}.
     *
     * @returns {void}
     */
    processLocalSdpForTransceiverInfo(): void;
    /**
     * {@link TraceablePeerConnection.setLocalDescription}.
     *
     * @returns {Promise<void>}
     */
    setLocalDescription(): Promise<void>;
    /**
     * {@link TraceablePeerConnection.setRemoteDescription}.
     *
     * @returns {Promise<void>}
     */
    setRemoteDescription(): Promise<void>;
    /**
     * {@link TraceablePeerConnection.setSenderVideoConstraints}.
     */
    setSenderVideoConstraints(): void;
    /**
     * {@link TraceablePeerConnection.setVideoTransferActive}.
     */
    setVideoTransferActive(): boolean;
    /**
     * {@link TraceablePeerConnection.usesUnifiedPlan}.
     */
    usesUnifiedPlan(): boolean;
    /**
     * {@link TraceablePeerConnection.getLocalVideoTracks}.
     */
    getLocalVideoTracks(): any[];
}
/**
 * Mock {@link RTC} - add things as needed, but only things useful for all tests.
 */
export class MockRTC {
    /**
     * {@link RTC.createPeerConnection}.
     *
     * @returns {MockPeerConnection}
     */
    createPeerConnection(): MockPeerConnection;
    pc: MockPeerConnection;
}
/**
 * MockSignalingLayerImpl
 */
export class MockSignalingLayerImpl {
    _remoteSourceState: {};
    /**
     * Returns the muted state, videoType and codec info received in presence.
     * @param {string} endpointId
     * @returns Object
     */
    getPeerMediaInfo(endpointId: string): any;
    /**
     * Updates the media info for peer on join/leave.
     * @param {boolean} isJoin - whether endpoint is joining or leaving the call
     * @param {string} endpointId - endpoint id
     * @param {Array<string>} codecList - new codec list published in presence
     * @param {string} codecType - legacy codec setting published in presence
     */
    setPeerMediaInfo(isJoin: boolean, endpointId: string, codecList: Array<string>, codecType: string): void;
}
/**
 * MockTrack
 */
export class MockTrack {
    /**
     * A constructor
     */
    constructor(height: any);
    height: any;
    /**
     * Returns height.
     * @returns {number}
     */
    getSettings(): number;
}
/**
 * MockJitsiLocalTrack
 */
export class MockJitsiLocalTrack {
    /**
     * A constructor
     */
    constructor(height: any, mediaType: any, videoType: any);
    track: MockTrack;
    type: any;
    videoType: any;
    /**
     * Returns the height.
     * @returns {number}
     */
    getHeight(): number;
    /**
     * Returns track.
     * @returns {MockTrack}
     */
    getTrack(): MockTrack;
    /**
     * Returns media type.
     * @returns {MediaType}
     */
    getType(): any;
    /**
     * Returns video type.
     * @returns {VideoType}
     */
    getVideoType(): any;
}
/**
 * MockRTCPeerConnection that return the local description sdp.
 */
declare class MockRTCPeerConnection {
    /**
     * local description SDP.
     */
    get localDescription(): {
        sdp: string;
    };
}
export {};
